// Code generated by vfsgen; DO NOT EDIT.

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2020, 2, 2, 18, 59, 38, 60875653, time.UTC),
		},
		"/changelog.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "changelog.tmpl",
			modTime:          time.Date(2019, 11, 27, 22, 59, 0, 487458630, time.UTC),
			uncompressedSize: 533,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x90\xcd\x4e\xc3\x30\x10\x84\xef\x79\x8a\x55\xc3\x21\x41\xaa\x7b\x47\xe2\x00\x05\xb5\x48\xfc\x54\x0d\x70\x41\x1c\x4c\xb2\x4d\x0c\x89\x1d\x6c\x97\x1f\xad\xf6\xdd\x91\xd3\x86\xa6\x17\x50\x4f\x89\xbf\x9d\xf1\x8e\x27\x86\xe9\xfc\xec\x76\x76\x79\x7d\x37\x8b\x22\xa2\x4f\xe5\x2b\x38\xca\x2b\xa9\x4b\xac\x4d\x09\x27\xa7\x20\x60\xcc\x1c\x11\xd9\xc0\x40\x2c\xb1\x46\xe9\xd0\x6d\xa9\x5a\x01\xbe\x83\x78\x44\xeb\x94\xd1\x30\x1a\x75\x3c\x8e\xe1\x41\xdb\x8d\xb2\x88\x88\xb0\x76\xd8\x0f\x9e\x88\x7a\x39\xf3\x73\x42\xb4\x5b\x27\x96\xd8\x1a\xa7\xbc\xb1\xdf\xcc\x93\xdc\x34\xad\xb4\x38\x19\xea\x85\x20\x12\x0b\x8b\x1f\xca\xac\xdd\x2f\x4d\x21\x21\x12\x17\xd2\x23\x73\x1a\xd6\xe9\x62\x3f\x74\x86\xb9\x57\x46\xbb\x3e\xb2\xb8\x72\xe7\x16\xe5\x9b\xd2\x65\x17\x2a\x06\x22\x71\xaf\x7c\x8d\x43\xd7\xd4\x34\x8d\xf2\xc1\x74\x1c\xe6\x37\xe8\x9c\x2c\x51\xf4\xce\xed\xb9\x73\x8c\x01\x75\xd1\xff\xed\x1e\x7b\xd0\xbd\x59\x6e\x5a\x5c\x58\x5c\xa9\x2f\xe6\x21\x5f\xbf\xbc\x62\xee\x99\x21\x09\xdd\x65\x95\xb1\x7e\x2e\x5d\xf5\x6f\x7b\x8d\xf2\xa1\xbc\x8d\x36\x4d\xf7\x62\xfe\xf9\xfd\x09\x00\x00\xff\xff\xe5\xe1\xdd\xda\x15\x02\x00\x00"),
		},
		"/circleci.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "circleci.tmpl",
			modTime:          time.Date(2019, 12, 2, 4, 43, 1, 483121354, time.UTC),
			uncompressedSize: 1261,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x4d\x6f\xdb\x30\x0c\xbd\xe7\x57\x10\xc6\xae\x89\xb1\x1d\x7d\xeb\x96\x00\x05\xf6\xd1\x21\x59\xb0\xa3\xa1\x48\xac\xa4\xda\x12\x3d\x51\x8a\x57\x18\xde\x6f\x1f\x6c\xb7\x99\xb7\x6e\x4b\x80\xa2\x37\x7d\x3c\x3e\x91\x4f\x7c\x3c\x62\x60\x4b\xbe\x80\x37\x8b\x3b\x3a\x70\xb1\x00\x38\x24\x5b\xab\x61\x01\xa0\x48\x56\x18\xa6\x35\xc0\x12\xac\x13\x1a\x0b\xe0\xd6\x46\x69\x0e\x36\x4a\x72\x79\x6b\xbd\x34\x85\xa6\x5a\x78\xfd\x00\x04\x10\x29\x9a\xe2\xb4\x03\x48\x8c\xc1\x0b\x87\x05\xbc\x5a\xdf\xbc\x7b\xbf\xd9\x5e\xef\xdf\x96\xfb\xdd\x66\xfb\xe9\xea\xe3\x66\x86\x6b\x04\x73\x4b\x41\xfd\x86\xfb\x7c\xb5\xdb\x7d\xbd\xd9\xae\x17\x5d\xb7\x04\x7b\x0b\xf8\x0d\x56\x1f\x84\xd7\x49\x68\x84\x4c\x53\xd6\xf7\x23\x45\x4b\xa1\xb2\x5e\x97\xca\x06\x94\x91\xc2\x7d\x01\xb9\xa6\x9c\x83\xcc\xbb\xae\xb5\xd1\x50\x8a\x2c\x0d\x3a\x84\xd5\x16\x1b\x62\x3b\x80\xfa\x7e\xe4\xc5\x9a\xf1\x29\xb9\x27\x85\xff\xa1\xff\x91\x07\x6c\x68\x8a\xf7\xea\x01\xc7\x11\x1b\xfe\xa5\x99\x34\x28\x2b\x4a\xf1\x74\xc0\x18\x53\x53\x06\x74\x14\xb1\x9c\x14\x3e\x57\xd9\x10\x16\x90\x23\x05\x2c\xa5\x90\x06\xe7\xda\x56\x78\xcf\xf3\xfd\x00\x56\xd8\xa0\x57\xe8\xa5\x45\x5e\x1e\x5f\x2f\xbb\x2e\xeb\xba\xac\xef\xa7\x6c\x38\xb9\x81\x7d\xc5\xc9\x65\x30\x9e\x67\x17\xab\xf0\x12\xa9\x34\x42\x56\x42\xe3\xea\x8e\xc9\xff\x99\xd0\x49\xd6\xf1\xe1\xe4\xe7\xf4\x53\x47\x7d\x49\xc1\x43\x34\x08\x46\x78\x55\xe3\xec\x5e\x92\x73\xc2\xab\x02\xc6\x1e\x05\x69\x2f\xd1\x99\xc5\xf1\xef\x95\x15\x2f\xac\xea\xf3\x1e\x3e\xab\xe1\xd9\xd2\x27\xff\x45\xf3\xe4\x07\xb3\xc1\x45\x4d\xa5\x73\x47\x2a\xbb\xb8\xa0\x7f\xd3\x0d\xb8\xd2\x91\x4a\x35\x72\x36\xcb\x70\x30\xd8\x6d\x4d\xed\x18\x31\x1b\x4c\x93\xf5\x86\x9b\x89\xea\x71\x50\x4d\x74\xb3\x71\xf5\xf8\xeb\x3e\xe2\xf7\x58\xc0\x7a\xf4\xd6\x75\x3a\xec\x1b\x25\x22\x86\xc5\xcf\x00\x00\x00\xff\xff\xda\x4f\x6c\x5c\xed\x04\x00\x00"),
		},
		"/go_dockerfile.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "go_dockerfile.tmpl",
			modTime:          time.Date(2020, 1, 30, 2, 1, 0, 504411659, time.UTC),
			uncompressedSize: 285,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\xb1\x4e\xc3\x30\x14\x45\xf7\xf7\x15\x57\x19\x3a\xf1\x9a\x2c\x7c\x01\x35\x52\x85\xb0\x23\xa7\x15\x54\xc0\xf0\xb0\x0d\xb5\x4a\x83\xe5\x38\x53\xd5\x7f\x47\x54\x22\x11\x43\xd7\x7b\xce\x95\xce\xbd\x35\x8f\x90\xaf\x14\xfb\x40\x76\xab\x21\xde\x8f\x43\xc8\xe0\x0e\xbc\x02\xef\x51\x4b\x4a\x38\x9d\x96\x5a\x8e\xe1\x7c\xc6\x62\x81\x57\x02\x00\x49\x07\x8c\xc9\x4b\x09\xff\x37\xe6\xfe\x9b\x9d\xb8\x7d\xc0\x98\x3e\xb3\xf8\xeb\x5c\xbc\x87\x13\x76\x21\x97\xf8\x11\x9d\x94\x30\xcc\xee\xf1\xe0\x63\x06\xa7\x4b\x40\xfd\x1e\x7b\xda\x76\xca\xce\x25\x74\x67\xda\x1d\x96\xbf\xa4\x9e\xf3\xfe\xe4\x9a\x9e\x8c\x7d\x58\xad\xed\x65\x21\xa5\x37\x76\xd7\x9a\xb5\xde\xe0\xa5\x9a\x9c\xe9\x56\xdd\xa0\x1a\x8a\xe4\x52\xbd\x91\x7a\x6e\x4d\xa7\x70\xdb\x34\x0d\xfd\x04\x00\x00\xff\xff\x7d\x14\x8e\x97\x1d\x01\x00\x00"),
		},
		"/java_mvn_dockerfile.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "java_mvn_dockerfile.tmpl",
			modTime:          time.Date(2020, 1, 30, 2, 1, 0, 505906715, time.UTC),
			uncompressedSize: 291,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\x41\x4b\xc3\x40\x10\x85\xef\xfb\x2b\x1e\x3d\xf4\x36\x4d\x04\xbd\x78\xb5\x11\x8a\x98\x0d\x9b\x16\x2d\xea\x61\xdc\x19\xed\x36\x36\x1d\xd2\xe4\x54\xfa\xdf\xc5\x82\x0d\x1e\xbc\xbe\xef\x7b\xf0\xdd\x07\xff\x88\xbd\x69\xbb\x95\xe6\xf6\xea\x9a\xb6\xd2\x10\x7f\x59\x6a\xd5\x85\x55\x09\x16\x19\x0e\xda\x81\x6a\xd0\x1c\xb4\x41\xc6\x66\x38\x1e\x67\x25\xef\xf4\x74\xc2\x74\x8a\x57\x07\x00\x6c\x0d\x06\x13\xee\xf5\xef\x46\xd4\xee\x29\x72\xdc\x28\x06\xfb\xec\x58\xfe\xe7\x2c\x82\xc8\x14\xb5\xeb\xd3\x47\x8a\xdc\xeb\x61\x74\x77\x8d\xa4\x0e\x64\xe7\x80\xec\x3d\xb5\x6e\x55\x17\x61\x2c\x71\x77\xbe\x5a\x63\xf6\x43\xb2\x31\xef\x57\xce\xdc\x93\x0f\x0f\xf3\x45\x38\x2f\xae\x28\x97\x61\x5d\xf9\x45\xb9\xc4\xcb\xe4\xe2\x5c\x6e\x93\x37\x57\x3c\x57\xbe\x2e\x70\x93\xe7\xb9\xfb\x0e\x00\x00\xff\xff\x0e\xc6\xa6\x0d\x23\x01\x00\x00"),
		},
		"/node_npm_dockerfile.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "node_npm_dockerfile.tmpl",
			modTime:          time.Date(2020, 1, 30, 2, 1, 0, 506983395, time.UTC),
			uncompressedSize: 265,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\x3f\x4f\xc3\x30\x14\xc4\x77\x7f\x8a\x53\x86\x4e\xbc\x92\x85\x85\x95\x06\xa9\x42\xc4\x91\xd3\x0a\x2a\x60\x78\xb2\x0d\xb5\x48\x9c\x27\xff\x99\xaa\x7e\x77\x54\x18\x10\x03\xd3\xe9\xee\x86\xdf\xef\xde\xe8\x47\xc4\xc5\xf9\x5b\x9e\x24\x44\xaf\xcc\xbe\x07\x3b\x57\xb3\x4f\xa0\x11\xb4\x01\x1d\x71\xcd\x22\x38\x9d\xd6\x3d\xcf\xfe\x7c\xc6\x6a\x85\x57\x05\x00\x2c\x9f\xa8\xe2\xb8\xf8\xbf\x1b\x51\x5c\xc8\xb2\x3d\x7a\x54\xf9\x48\xec\xfe\xff\xd9\x39\x58\x26\xeb\x53\x09\xef\xc1\x72\xf1\x59\xed\xc7\xce\xfc\xe2\xd4\x9d\x1e\x0e\x58\x7f\x4b\xa8\x27\x6d\x1e\x36\x5b\xf3\x53\x2e\xae\x51\x66\x84\x98\x0b\x4f\x13\x88\x24\x2d\xae\xda\x12\x96\xa8\xba\x7e\x67\x0e\x83\xde\xf6\x3b\xbc\x34\x51\xe6\xe6\x0a\x4d\xaa\xf1\x12\xb9\x70\x2a\xcd\x9b\xea\x9e\x07\x3d\x76\xb8\x69\xdb\x56\x7d\x05\x00\x00\xff\xff\xdf\x71\xb5\xfa\x09\x01\x00\x00"),
		},
		"/node_yarn_dockerfile.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "node_yarn_dockerfile.tmpl",
			modTime:          time.Date(2020, 1, 30, 2, 1, 0, 508187160, time.UTC),
			uncompressedSize: 259,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xce\x31\x4f\xc3\x30\x14\x04\xe0\xdd\xbf\xe2\x94\xa1\x13\xaf\x64\x61\x61\xa5\x41\xaa\x10\x71\xe4\xb4\x82\x0a\x18\x9e\xec\x07\xb5\x48\x9d\x27\xc7\x19\x50\x95\xff\x8e\x80\x01\x31\x30\xde\xdd\x70\xdf\xad\xb3\xf7\x48\x63\x90\x6b\x1e\x34\x26\x31\x6e\xdf\x82\x43\x98\x27\xc9\xa0\x1e\xb4\x01\x1d\x71\xc9\xaa\x38\x9f\xd7\x2d\x9f\x64\x59\xb0\x5a\xe1\xd9\x00\x00\xeb\x3b\x66\x0d\x5c\xe4\x6f\x47\x94\x46\xf2\xec\x8f\x82\x59\xdf\x32\x87\xff\x77\x0e\x01\x9e\xc9\x4b\x2e\xf1\x35\x7a\x2e\x32\x99\x7d\xdf\xb8\xdf\x3b\x73\x63\xbb\x03\xd6\xdf\x08\xf3\x60\xdd\xdd\x66\xeb\x7e\xc2\x97\x35\xe9\x09\x31\x4d\x85\x87\x01\x44\x9a\xc7\x30\xfb\x12\xc7\x64\x9a\x76\xe7\x0e\x9d\xdd\xb6\x3b\x3c\x55\x1f\x9c\x53\x75\x81\x6a\x2a\x9c\x4b\xf5\x62\x9a\xc7\xce\xf6\x0d\xae\xea\xba\x36\x9f\x01\x00\x00\xff\xff\x5e\x30\x37\x40\x03\x01\x00\x00"),
		},
		"/python_dockerfile.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "python_dockerfile.tmpl",
			modTime:          time.Date(2020, 1, 30, 2, 1, 0, 508784604, time.UTC),
			uncompressedSize: 272,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\x41\x4b\x03\x31\x10\x85\xef\xf9\x15\x8f\x3d\xf4\xe4\x6c\x17\x44\x10\xaf\x76\x85\x22\x26\x4b\xb6\x45\x8b\x7a\x18\x93\xe8\x86\xda\x74\x48\xb3\x87\x52\xfa\xdf\x85\x16\x2c\x1e\x3c\xce\x7c\xef\xc1\xf7\x1e\xac\x79\x82\xec\xcb\xb0\x4d\x77\xd7\xf5\x2d\xf1\xb7\xc4\x14\x94\x5d\x6a\xb0\xf7\xe3\x2e\x64\x50\x0f\x9a\x81\x06\x4c\x59\x04\x87\x43\xad\x79\x13\x8e\x47\x4c\x26\x78\x53\x00\xc0\xb2\xc6\x28\x9e\x4b\xf8\xfb\x23\x4a\x5b\x72\xec\x86\x80\x51\xbe\x32\xfb\xff\x39\x7b\x0f\xc7\xe4\x42\x2e\xf1\x33\x3a\x2e\x61\x77\xc9\x6e\xd6\x3e\x66\x90\x9c\x04\xa6\x1f\x31\xa9\x65\xdf\xda\x8b\x89\xba\x37\xdd\x0a\xf5\x09\xab\x67\x63\x1f\x67\x73\x7b\x3e\x5a\xbd\xb0\xab\xce\xcc\xf5\x02\xaf\xd5\x79\x65\x75\x85\xea\xb7\x59\xcb\xbe\x7a\x57\xed\x4b\x67\xfa\x16\x37\x4d\xd3\xa8\x9f\x00\x00\x00\xff\xff\xc6\xc3\x81\x36\x10\x01\x00\x00"),
		},
		"/release.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "release.tmpl",
			modTime:          time.Date(2019, 11, 29, 6, 20, 19, 830044147, time.UTC),
			uncompressedSize: 361,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x90\x41\x4b\x43\x31\x0c\xc7\xef\xfb\x14\x81\xe7\x61\x13\x96\xdd\x05\x2f\x7a\xd1\x83\x20\x7b\xde\xc4\x43\xad\x59\x1b\xed\xda\xd1\x54\x54\x42\xbe\xbb\xbc\xea\x70\xbb\x08\x3b\xb5\xfd\x35\xbf\xfc\x43\x54\x3f\xb8\x45\x38\xf3\xd1\xe5\x40\xa9\x04\xb8\xb8\x04\x84\xa5\xd9\x4c\xb5\x4e\x0c\x70\x4d\x89\x9c\x90\x1c\xd3\x91\x7c\xe3\x92\xa5\x33\xde\x00\xde\xca\x55\x25\xf7\xc6\x39\x98\xcd\x86\x61\x00\x55\x7c\xe0\x96\xe8\xd0\xba\x2e\xdb\x2d\xb7\x49\x3a\x9f\xfe\xef\x48\xc4\x05\xc2\xbd\xf9\xfb\xee\xc6\x12\x28\xbf\xec\x6f\x49\xa8\xc7\x9f\xd8\x77\xf4\x65\x47\xf7\x95\x36\xfc\x69\x76\xc8\xdf\x9f\x5f\xc9\x37\x33\x98\x3f\xaa\xe2\x18\x4b\x6d\x37\x4e\xa2\xd9\xd3\x5c\xf5\x6f\x1b\xb8\xa6\x5d\x11\x6e\xa5\x7e\x99\xad\x7c\x0f\x59\xa9\xe2\x4f\xed\x62\x71\x34\xe6\xbf\xe7\x77\x00\x00\x00\xff\xff\x32\x5d\x39\x69\x69\x01\x00\x00"),
		},
		"/scala_sbt_dockerfile.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "scala_sbt_dockerfile.tmpl",
			modTime:          time.Date(2020, 1, 30, 2, 1, 0, 509349365, time.UTC),
			uncompressedSize: 291,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\x41\x4b\xc3\x40\x10\x85\xef\xfb\x2b\x1e\x3d\xf4\x36\x4d\x04\xbd\x78\xb5\x11\x8a\x98\x0d\x9b\x16\x2d\xea\x61\xdc\x19\xed\x36\x36\x1d\xd2\xe4\x54\xfa\xdf\xc5\x82\x0d\x1e\xbc\xbe\xef\x7b\xf0\xdd\x07\xff\x88\xbd\x69\xbb\x95\xe6\xf6\xea\x9a\xb6\xd2\x10\x7f\x59\x6a\xd5\x85\x55\x09\x16\x19\x0e\xda\x81\x6a\xd0\x1c\xb4\x41\xc6\x66\x38\x1e\x67\x25\xef\xf4\x74\xc2\x74\x8a\x57\x07\x00\x6c\x0d\x06\x13\xee\xf5\xef\x46\xd4\xee\x29\x72\xdc\x28\x06\xfb\xec\x58\xfe\xe7\x2c\x82\xc8\x14\xb5\xeb\xd3\x47\x8a\xdc\xeb\x61\x74\x77\x8d\xa4\x0e\x64\xe7\x80\xec\x3d\xb5\x6e\x55\x17\x61\x2c\x71\x77\xbe\x5a\x63\xf6\x43\xb2\x31\xef\x57\xce\xdc\x93\x0f\x0f\xf3\x45\x38\x2f\xae\x28\x97\x61\x5d\xf9\x45\xb9\xc4\xcb\xe4\xe2\x5c\x6e\x93\x37\x57\x3c\x57\xbe\x2e\x70\x93\xe7\xb9\xfb\x0e\x00\x00\xff\xff\x0e\xc6\xa6\x0d\x23\x01\x00\x00"),
		},
		"/version_go.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "version_go.tmpl",
			modTime:          time.Date(2019, 12, 12, 10, 11, 44, 556615677, time.UTC),
			uncompressedSize: 554,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\x51\x4b\xc3\x30\x14\x85\x9f\x73\x7f\xc5\x35\x20\x34\x50\xdb\x77\x61\x0f\xb2\x89\xfa\xb2\xca\x36\x7c\xaf\xd9\xed\x16\x5c\xd3\x90\xa4\x8a\x94\xfe\x77\x69\x9a\x6d\x61\x60\xe9\x4b\xce\xf9\xce\xb9\xb9\x29\x4b\x5c\x76\x7b\xc2\x03\x69\xb2\xb5\xa7\x3d\x7e\xfe\xe2\x8f\xd2\xf2\x58\xe0\xaa\xc2\x75\xb5\xc3\xe7\xd5\xdb\xae\x00\x53\xcb\xaf\xfa\x40\xf8\x4d\xd6\xa9\x4e\x03\xa8\xd6\x74\xd6\x63\x06\x8c\x37\xad\xe7\xc0\xb8\xed\xb5\x57\x2d\x71\x10\x00\xb2\xd3\x2e\x98\xeb\xba\x25\x8c\xdf\x02\xf9\x30\x14\x93\x32\x8e\x1c\xd8\x8a\x9c\xb4\xca\x78\xd5\xe9\x68\x25\x4a\x20\x36\x74\xa2\xda\x51\xe8\x98\x89\x44\x09\xc4\xc7\x7c\x9d\xa4\x3e\x2a\xc1\x7d\xb7\x64\xe7\xc0\xd9\xbd\x2a\x13\x20\x00\xca\x12\xb7\xde\x2a\x7d\x40\x4b\xbe\xb7\xda\xa1\x3f\x12\xca\xae\x35\x27\xf2\x97\x75\xd1\x05\x26\x47\xa5\xe5\xa9\xdf\x4f\xb8\xb9\x34\x41\xd3\x6b\x19\x5b\x32\x11\x51\x1c\x80\x39\x7c\x5c\x60\xd3\xfa\x62\x6b\xac\xd2\xbe\xc9\xf8\xbd\xc3\xf0\xf3\x1c\xe3\x6b\x15\x2f\x55\xb5\x4d\x4f\x4f\x9b\xe5\xeb\xf5\x1c\xb7\xc9\x84\x00\xa6\x1a\x4c\x16\xba\x5b\x20\xe7\xd3\x14\x36\x5f\xfc\x76\xd0\xc3\x79\x50\xac\xc8\x93\x70\x8e\x4e\x00\x1b\xe1\x9f\xe8\x4d\xce\x09\x18\x01\xfe\x02\x00\x00\xff\xff\xdc\x0d\x6b\xef\x2a\x02\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/changelog.tmpl"].(os.FileInfo),
		fs["/circleci.tmpl"].(os.FileInfo),
		fs["/go_dockerfile.tmpl"].(os.FileInfo),
		fs["/java_mvn_dockerfile.tmpl"].(os.FileInfo),
		fs["/node_npm_dockerfile.tmpl"].(os.FileInfo),
		fs["/node_yarn_dockerfile.tmpl"].(os.FileInfo),
		fs["/python_dockerfile.tmpl"].(os.FileInfo),
		fs["/release.tmpl"].(os.FileInfo),
		fs["/scala_sbt_dockerfile.tmpl"].(os.FileInfo),
		fs["/version_go.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
